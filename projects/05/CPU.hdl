// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //we are going to produce loadA, loadD, and writeM from the instruction bits
    //C instruction or A instruction? come out from the instruction msb
    //if the instruction is A instruction, the msb bit is 1, otherwise 0

    DMux(in=true, sel=instruction[15], a=instA, b=instD);
    Or(a=instA, b=instruction[5], out=loadRegA); // because it requires 0 or 1
    And(a=instD, b=instruction[4], out=loadRegD);// because it requires 1 in both
    
    //Mux to feed register A:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=feedA);
    //a=0 or a=1? come out from the instruction msb
    
    ARegister(in=feedA, load=loadA, out=outA, out=addressM);

    //Mux to feed ALU:
    Mux16(a=inM, b=outA, sel=, out=outMuxALU);

    //D register:
    //produce loadD from the instruction bits
    //if the instruction is C instruction, the msb bit is 1, otherwise 0
    DRegister(in=outM, load=loadD, out=registerDout);

    ALU(x=, y=, zx=, nx=, zy=, ny=, f=, no=, out=outM, zr=, ng=);

    //PC:
    PC(in=outA, load=, inc=, reset=reset, out=pc);

}
